---
sudo: required
dist: bionic
notifications:
  slack:
    on_failure: always
matrix:
  fast_finish: true
  include:

# https://github.com/jgsqware/clairctl
    - name: "deploy clairctl w Damn Vulnerable Web Application on bionic amd64"
      dist: bionic
      arch: amd64
      sudo: false
      language: python
      # python: 3.7
      services:
        - docker 
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        # Master branch version
        - curl -L https://raw.githubusercontent.com/jgsqware/clairctl/master/install.sh | sh
        # check out the clairctl repo and start the complete postgres/clair/clairctl stack
        - git clone git@github.com:jgsqware/clairctl.git $GOPATH/src/github.com/jgsqware/clairctl
        - cd $GOPATH/src/github.com/jgsqware/clairctl
        - docker-compose up -d postgres
        # make sure clairctl can reach clair
        - docker-compose exec clairctl clairctl health
        - docker pull infoslack/dvwa
      after_success:
        - deactivate


    - name: "deploy clairctl w Damn Vulnerable Web Application on bionic amd64"
      dist: bionic
      arch: amd64
      sudo: false
      language: python
      # python: 3.7
      services:
        - docker 
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - mkdir -p clair/docker-compose-data/clair-config
        - wget https://raw.githubusercontent.com/jgsqware/clairctl/master/docker-compose.yml --directory-prefix=clair/docker-compose-data/
        - wget https://raw.github.com/jgsqware/clairctl/master/docker-compose-data/clair-config/config.yml --directory-prefix=clair/clair-config/
        - cd clair/docker-compose-data
        -  docker-compose up &
        - sleep 1200 #20 mins
        - docker-compose ps
        - docker pull infoslack/dvwa
        # ERROR: No container found for clairctl_1
        # - docker-compose exec clairctl clairctl analyze --local infoslack/dvwa
        - docker-compose exec clairctl clairctl analyze -l infoslack/dvwa
      after_success:
        - deactivate

    # - name: "deploy clair-scanner wo snaps on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   sudo: false
    #   language: python
    #   # python: 3.7
    #   services:
    #     - docker 
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #   # Clone the repo
    #     - git clone https://github.com/arminc/clair-scanner
    #     # Build and install 
    #     - make installLocal
    #     - ./clair-scanner -h
    #     - docker run -p 5432:5432 -d --name db arminc/clair-db:2017-09-18
    #     - docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.6
    #     - clair-scanner --ip 127.0.0.1 alpine:3.5
    #   after_success:
    #     - deactivate

    # - name: "deploy clair-scanner wo snaps on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   sudo: false
    #   language: python
    #   # python: 3.7
    #   services:
    #     - docker 
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - docker network create scanning 
    #     - docker run -p 5432:5432 -d --net=scanning --name db arminc/clair-db:latest
    #     - echo "Snoozing for DB to start" && sleep 30
    #     - docker run -p 6060:6060 -d --net=scanning --link db:postgres --name clair arminc/clair-local-scan:v2.0.1
    #     - echo "Snooze to check if images are up" && sleep 12
    #     - docker ps
    #     - targetImage="alpine:3.5"
    #     - docker pull $targetImage
    #     - BUILD_TAG="alpine"
    #     - mkdir /tmp/$BUILD_TAG || echo "Folder was already present"
    #     - chmod 777 /tmp/$BUILD_TAG
    #     - BUILD_NUMBER="11"
    #     - docker run --net=scanning --rm --name=scanner --link=clair:clair -v "/tmp/$BUILD_TAG/:/var/log/:z" -v \'/var/run/docker.sock:/var/run/docker.sock:z\' objectiflibre/clair-scanner --clair="http://clair:6060" --ip="scanner" -r "var/log/$BUILD_NUMBER.json" -t Medium $targetImage || echo "Warning Error returned in results remove this echo if you really want to stop the job here"
    #     - cat /tmp/$BUILD_TAG/$BUILD_NUMBER.json
    #     - docker container stop db || echo "."
    #     - docker container stop clair || echo "."
    #     - docker container rm db || echo "."
    #     - docker container rm clair || echo "."
    #     - docker network rm scanning || echo "."
    #     - docker container prune -f || echo "."
    #     - docker image prune -f || echo "."
    #     - rm -rf /tmp/$BUILD_TAG || echo "."
    #   after_success:
    #     - deactivate


    # - name: "deploy clair w minikube kubectl helm latest wo snaps on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   # python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-kubectl-helm-latest
    #     - sudo make deploy-clair
    #   after_success:
    #     - deactivate

    # - name: "scan images w clair wo snaps on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   # python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-helm-clair
    #   after_success:
    #     - deactivate

    # - name: "Submitting A Manifest w clairctl wo snaps on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #   # This is a CLI tool capable of grabbing image manifests from public repositories 
    #   # and and submitting them for analysis
    #   # The command will be in the Clair container,
    #   # can also be installed locally by running the following command
    #     - go install github.com/quay/clair/v4/cmd/clairctl
    #     # submit a manifest to ClairV4 via the following command.
    #     # By default, clairctl will look for Clair at localhost:6060
    #     # - clairctl --host ${net_address_of_clair} report ${image_tag}
    #     - clairctl report ubuntu:focal
    #   after_success:
    #     - deactivate
